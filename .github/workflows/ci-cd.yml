name: CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Ansible & Ansible-Lint via pip
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install ansible ansible-lint
      - name: Lint Ansible
        run: |
          cd ansible
          ansible-lint . --force-color
      - name: Lint Vagrantfile
        run: |
          sudo apt-get install -y ruby ruby-dev
          gem install vagrant-vagrantfile-lint
          vagrant-vagrantfile-lint Vagrantfile

  build-test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Lint JS
        run: npm run lint

      - name: Unit tests
        run: npm test

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - name: Install Ansible via pip
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install ansible
      - name: Deploy to Dev
        run: ansible-playbook -i ansible/inventories/dev/hosts.yml ansible/playbooks/frontend.yml

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: https://prod.example.com
    steps:
      - uses: actions/checkout@v3
      - name: Install Ansible via pip
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install ansible
      - name: Deploy to Prod
        run: ansible-playbook -i ansible/inventories/prod/hosts.yml ansible/playbooks/site.yml

  docker-deploy:
    runs-on: self-hosted
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build Docker image
        run: docker build -t devops-ninja-app:latest .
      - name: Deploy to Minikube
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/devops-ninja-app

  test-infra:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    steps:
      - uses: actions/checkout@v3
      - name: Install testinfra
        run: pip install testinfra
      - name: Run infrastructure tests
        run: pytest test/
