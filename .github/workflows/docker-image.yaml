name: Build, Scan, and Push Docker Image

on:
  push:
    branches: [ master ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    # Donne au workflow les permissions nécessaires pour pousser une image sur GHCR
    permissions:
      contents: read
      packages: write

    steps:
      # Étape 1 : Cloner le dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Se connecter au GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Étape 3 : Forcer le nom du repository en minuscules pour Docker
      - name: Normalize repo name (lowercase)
        id: repo
        run: echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

      # Étape 4 : Préparer Docker Buildx (pour build multiplateforme ou optimisé)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Étape 5 : Construire l'image Docker avec le tag GHCR
      - name: Build Docker image
        run: docker build -t ghcr.io/${{ env.REPO_NAME }}:latest .

      # Étape 6 : Scanner l'image avec Trivy et générer un rapport JSON
      - name: Scan image with Trivy and generate JSON report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ env.REPO_NAME }}:latest
          format: json
          output: trivy-report.json
          exit-code: 0  # Le pipeline continue même s'il y a des vulnérabilités

      # Étape 7 : Télécharger le rapport Trivy en tant qu'artefact GitHub Actions
      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-security-report
          path: trivy-report.json

      # Étape 8 : Pousser l'image vers GHCR
      - name: Push image to GitHub Container Registry
        run: docker push ghcr.io/${{ env.REPO_NAME }}:latest
